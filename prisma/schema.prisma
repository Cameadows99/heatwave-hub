generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  role          Role           @default(EMPLOYEE)
  team          String?
  createdAt     DateTime       @default(now())
  accounts      Account[]
  orderRequests OrderRequest[] @relation("UserOrderRequests")
  rsvps         Rsvp[]         @relation("UserRsvps")
  sessions      Session[]

  // NAME BOTH SIDES OF THE RELATIONS:
  timeEntries       TimeEntry[] @relation("UserTimeEntries")
  editedTimeEntries TimeEntry[] @relation("EditedByRelation")

  timeOff TimeOffRequest[]
}

model TimeEntry {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("UserTimeEntries", fields: [userId], references: [id], onDelete: Cascade)

  editedById String?
  editedBy   User?   @relation("EditedByRelation", fields: [editedById], references: [id], onDelete: SetNull)

  clockIn     DateTime
  clockOut    DateTime?
  source      TimeSource @default(APP)
  adjustmentM Int        @default(0)
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, clockIn])
  @@index([editedById])
}

enum TimeSource {
  APP
  ADMIN_EDIT
  IMPORT
}

model TimeOffRequest {
  id        String        @id @default(cuid())
  userId    String
  startDate DateTime
  endDate   DateTime
  reason    String
  status    TimeOffStatus @default(PENDING)
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  date        String
  location    String
  description String
  attendees   String[] @default([])
  time        String?
  rsvps       Rsvp[]   @relation("EventRsvps")
}

model Rsvp {
  id        String   @id @default(cuid())
  eventId   String
  userId    String?
  name      String
  plusCount Int      @default(0)
  createdAt DateTime @default(now())

  event Event @relation("EventRsvps", fields: [eventId], references: [id], onDelete: Cascade)
  user  User? @relation("UserRsvps", fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model OrderRequest {
  id          String   @id @default(cuid())
  requesterId String
  createdAt   DateTime @default(now())
  items       String[]
  details     String?
  reason      String?
  ordered     Boolean  @default(false)
  requester   User     @relation("UserOrderRequests", fields: [requesterId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

enum TimeOffStatus {
  PENDING
  APPROVED
  DENIED
}

enum Role {
  ADMIN
  EMPLOYEE
  MANAGER
}
